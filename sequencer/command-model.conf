subsystem = TCS
component = tcs-seq

description = "TCS Sequencer commands."

receive = [

  {
    name = initialize
    description = "Ready the TCS system for operations.  This includes powering up amplifiers and drives.  It does not start any motion."
    requiredArgs=[system]
    args = [
      {
        name = system
	description = "Name of TCS subsystem to functionally initialize"
	enum = [All, SEQ, PK, CM, MCS, SHS, ENC, M1, M2, M3]
      }
    ]
  }  
  {
    name = shutdown
    description = "Shutdown TCS system, including amplifiers."
    requiredArgs=[system]
    args = [
      {
        name = system
	description = "Name of TCS subsystem to functionally shutdown"
	enum = [All, SEQ, PK, CM, MCS, SHS, ENC, M1, M2, M3]
      }
    ]
  }
  {
    name = datum
    description = "Request system to reference all encoders"
    requiredArgs=[system, axes]
    args = [
      {
        name = system
	description = "Which system to datum"
	enum = [All, MCS, ENC, M3]
      }
      {
        name=axes
	description = "Which axes to datum. Note for M3 AZ, EL will map to Rotation and Tilt, for ENC AZ, EL will app to Base and Cap"
	enum=[BOTH, AZ, EL]

      }
    ]
  }
  {
    name = park
    description = "Request system to move to park/stow position"
    requiredArgs=[system]
    args = [
      {
        name = system
	description = "Which system to park"
	enum = [All, MCS, ENC, M3]
      }
    ]
  }
  {
    name = halt
    description = "Quickly stop motion"
    requiredArgs=[system]
    args = [
      {
        name = system
	description = "Which subsystem to halt"
	enum = [All, MCS, ENC, M2, M3]
      }
    ]
  }
  {
    name = setInstrument
    description = "Specify current instrument being used for observing"
    requiredArgs=[instrument]
    args = [
      {
        name = instrument
	description = "Name of instrument"
	enum = [IRIS, MODHIS, WFOS]
      }
    ]
  }
  {
    name = setPointingOrigin
    description = "Specify pointing origin"
    requiredArgs=[origin]
    args = [
      {
        name = origin
        description = "name of pointing origin"
        type = string
      }
    ]
  }
  {
    name = setPointingControl
    description = "Allows control of the mount point control. At the moment this provides control over the dawdle mode but may be expanded to allow guider loop filer changes"
    requiredArgs=[dawdlemode, tuneparam]
    args = [
      {
        name=dawdlemode
	description = "Turns dawdle mode on/off"
	enum=[ON, OFF]
      }
      {
        name=tuneparam
	description = "Dawdle Filter Tuning parameter in Hertz (Max rate of change for the target position and PO)"
	type = float
      }
    ]
  }

  {
    name = setWrapMoveDirection
    description = "Direction for Azmimuth and Rotator Wraps to move.  Possible values are Clockwise (CW), Counter-Clockwise (CCW), and Shortest Path (SP).  During observing, they are typically set to Shortest Path. "
    requiredArgs=[wrap, direction]
    args = [
      {
        name=wrap
	description = "Which wrap this applies to"
	enum=[AZIMUTH, ROTATOR, BOTH]
      }
      {
        name=direction
	description = "Direction to move specified wrap(s)"
	enum=[CW, CCW, SP]
      }
    ]
  }
  {
    name = addTrackingTarget
    description = "Specify a tracking target information for next observation. This includes the science target, wavefront sensor stars, and guide stars."
    requiredArgs = [name, vtname, coordinates, referenceFrame]
    args = [
      {
        name = name
	description = "Target name"
	type = string
      }
      {
        name = vtname
	description = "Virtual telescope to which the target is being applied. Note the mount, enclosure, M3 and rotator are all driven from the MOUNT target"
	enum = [MOUNT, OIWFS1, OIWFS2, OIWFS3, OIWFS4, ODGW1, ODGW2, ODGW3, ODGW4, GUIDER1, GUIDER2]
      }
      {
        name = coordinates
	description = "Right Ascension and Declination of target"
	type = object
      }
      {
        name = referenceFrame
	description = """
	Nominated celestial reference system

	International Celestial Reference System (ICRS) is the current standard celestial reference system adopted by the International Astronomical Union (IAU). It is the simplest target reference system. It represents a fixed position in the ICRF.

	Fifth Fundamental Catalogue (FK5) is similar to ICRS targets but with the addition of the equinox (a Julian epoch). It represents a fixed position in the FK5.

	The APPT reference system is used to represents a geocentric apparent place.

	The APPT_TOPO reference system is used to represents a topocentric apparent places. 

	"""
	enum = [ICRS, FK5, APPT, APPT_TOPO]
      }
      {
        name = epoch
	description = "epoch for coordinates [ICRS, FK5]"
	enum = [J2000, TBD]
      }
      {
        name = properMotionRa
	description = "proper motion of target in RA [ICRS, FK5]"
	type = float
	units = mas/year
      }
      {
        name = properMotionDec
	description = "proper motion of target in declination [ICRS, FK5]"
	type = float
	units = mas/year
      }
      {
        name = radialVelocity
	description = "radial velocity of target [ICRS, FK5]"
	type = float
	units = km/s
      }
      {
        name = referenceTime
	description = "TBD. For non-sidereal targets"
	type = taiDate
      }
      {
        name = differentialTrackingRateRA
	description = "TBD. For non-sidereal targets"
	type = float
	units = mas/day
      }	
      {
        name = differentialTrackingRateDec
	description = "TBD. For non-sidereal targets"
	type = float
	units = mas/day
      }	
      {
        name = wavelength
	description = "TBD"
	type = float
	units = microns
      }
      {
        name = targetWavelength
	description = "TBD"
	type = float
	units = microns
      }
      {
        name = rates
	description = "TBD"
	type = float
	units = microns
      }

    ]
  }
  {
    name = addSolarSystemTarget
    description = "Specify a Solar System target information for next observation. This includes the science target, wavefront sensor stars, and guide stars."
    requiredArgs=[name, vtname, referenceFrame]
    args = [
      {
        name = name
	description = "Target name"
	type = string
      }
      {
        name = vtname
	description = "Virtual telescope to which the target is being applied. Note the mount, enclosure, M3 and rotator are all driven from the MOUNT target"
	enum = [MOUNT, OIWFS1, OIWFS2, OIWFS3, OIWFS4, ODGW1, ODGW2, ODGW3, ODGW4, GUIDER1, GUIDER2]
      }
      {
        name = referenceFrame
	description = """ 
	Nominated celestial reference system

	AAMajorPlanet: This represents a target whose position is defined by a set of osculating orbital elements as tabulated in the Astronomical Almanac for the major planets.

	JPLMajorPlanet, JPLMinorPlanet, JPLComet: This represents a target whose position is defined by a set of osculating orbital elements as supplied by the JPL Horizons system for the major planets.

	AAMinorPlanet: A target whose position is defined by a set of osculating orbital elements as tabulated in the Astronomical Almanac and supplied by the Minor Planets Center for minor planets.

	MPCMinorPlanet, MPCComet: A target whose position is defined by a set of osculating orbital elements as tabulated in the Astronomical Almanac and supplied by the Minor Planets Center for comets and the JPL Horizons system for both minor planets and comets.

	"""
	enum = [AAMajorPlanet, AAMinorPlanet, JPLMajorPlanet, JPLMinorPlanet, JPLComet, MPCMinorPlanet, MPCComet]
      }
      {
        name = epochofel
	description = "Epoch of elements [AAMajorPlanet, JPLMajorPlanet, JPLMinorPlanet, JPLComet, AAMinorPlanet, MPCMinorPlanet, MPCComet]"
	type = integer
      }
      {
        name = epochofperih
	description = "Epoch of perihelion [MPCMinorPlanet, MPCComet]"
	type = integer
      }
      {
        name = orbinc
	description = "Orbital inclination [AAMajorPlanet, JPLMajorPlanet, JPLMinorPlanet, JPLComet, AAMinorPlanet, MPCMinorPlanet, MPCComet]"
	type = float
      }
      {
        name = longascnode
	description = "Longitude of ascending node [AAMajorPlanet, JPLMajorPlanet, JPLMinorPlanet, JPLComet, AAMinorPlanet, MPCMinorPlanet, MPCComet]"
	type = float
      }
      {
        name = argofperih
	description = "Argument of perihelion [JPLMajorPlanet, JPLMinorPlanet, JPLComet, AAMinorPlanet, MPCMinorPlanet, MPCComet]"
	type = float
      }
      {
        name = meandist
	description = "Mean distance [AAMajorPlanet, JPLMajorPlanet, JPLMinorPlanet, JPLComet, AAMinorPlanet]"
	type = float
	units = AU
      }
      {
        name = peridist
	description = "Perihelion distance [MPCMinorPlanet, MPCComet]"
	type = float
	units = AU
      }
      {
        name = eccentricity
	description = "Eccentricity of orbit [AAMajorPlanet, JPLMajorPlanet, JPLMinorPlanet, JPLComet, AAMinorPlanet, MPCMinorPlanet, MPCComet]"
	type = float
      }
      {
        name = meanlong
	description = "Mean longitude [AAMajorPlanet]"
	type = float
      }
      {
        name = meananom
	description = "Mean anomoly [JPLMajorPlanet, JPLMinorPlanet, JPLComet, AAMinorPlanet]"
	type = float
      }
      {
        name = dailymot
	description = "Daily motion [AAMajorPlanet, JPLMajorPlanet, JPLMinorPlanet, JPLComet]"
	type = float
      }
      {
        name = wavelength
	description = "TBD"
	type = float
	units = microns
      }

      {
        name = targetWavelength
	description = "TBD"
	type = float
	units = microns
      }
      {
        name = rates
	description = "TBD"
	type = float
	units = microns
      }

    ]
  }
  {
    name = addPlanetTarget
    description = "Specify a planet target information for next observation. This includes the science target, wavefront sensor stars, and guide stars.  For the seven major planets (not including the Earth and Pluto) there is a class called Planet that uses ephemerides.  Reference frame is Ephemerides."
    requiredArgs=[name, vtname]
    args = [
      {
        name = name
	description = "Planet name"
	type = string
      }
      {
        name = vtname
	description = "Virtual telescope to which the target is being applied. Note the mount, enclosure, M3 and rotator are all driven from the MOUNT target"
	enum = [MOUNT, OIWFS1, OIWFS2, OIWFS3, OIWFS4, ODGW1, ODGW2, ODGW3, ODGW4, GUIDER1, GUIDER2]
      }
      {
        name = wavelength
	description = "TBD"
	type = float
	units = microns
      }

      {
        name = targetWavelength
	description = "TBD"
	type = float
	units = microns
      }
      {
        name = rates
	description = "TBD"
	type = float
	units = microns
      }

    ]
  }
  {
    name = setSpectralWeights
    description = "Set the ADC spectral weights (spectral energy distribution)"
    requiredArgs=[weights, wavelengths, adcName]
    args = [
      {
        name=weights
	description = "Array of weights"
	type = array
	items = {
	  type=float
	}
      }
      {
        name=wavelengths
	description = "Array of wavelengths for each weight"
	units = microns
	type = array
	items = {
	  type=float
	}
      }
      {
        name=adcName
	description = "Name of ADC these weights apply to"
	type = string
      }
    ]
  }
  {
    name = adjustPointing
    requiredArgs=[type, x, y]
    description = "Start process to refine telescope pointing"
    args = [
      {
        name = type
	description = "Is this to be an automated find or a specified star location"
	enum = [AUTO, XY]
      }
      {
        name = x
	description = "X position"
	type = float
	units = pixel
      }
      {
        name = y
	description = "Y position"
	type = float
	units = pixel
      }
    ]
  }
  {
    name = startGuiding
    description = "Attempt to close guide loops at current position"
    args = [
      {
        name = centroidOnly
	description = "Set if centroids are calculated but don't apply guider corrections"
	type = boolean
      }
    ]
  }
  {
    name = snapshotWCS
    description = "Ask TCS to snapshot the WCS information"
  }
  {
    name = setOffsetMode
    description = "Specify whether future offsets are relative to base or relative to current position"
    requiredArgs=[mode]
    args = [
      {
        name = mode
	description = "Set to BASE if offset are made relative to base position, set to CURRENT if relative to current position"
	enum = [BASE, CURRENT]
      }
    ]
  }
  {
    name = offset
    description = "Move the telescope some small amount for nodding or dithering"
    requiredArgs=[coordinateSystem, x, y, virtualTelescope]
    args = [
      {
        name = coorindateSystem
	description = "Coordinate system in which to apply offsets"
	enum = [RADEC, XY, ALTAZ]
      }
      {
        name = x
	description = "first value of offset in specified coordinate system"
	type = float
      }
      {
        name = y
	description = "second value of offset in specified coordinate system"
	type = float
      }
      {
        name = virtualTelescope
	description = "Virtual telescope for the pointing kernel to use to calculate offsets"
	enum = [MOUNT, OIWFS1, OIWFS2, OIWFS3, OIWFS4, ODGW1, ODGW2, ODGW3, ODGW4, GUIDER1, GUIDER2]
      }
    ]  
  }
  {
    name = setRotator
    description = "Set the rotator angle and mode."
    args = [
      {
        name = positionAngle
        description = "Position angle of current instrument"
        type = float
	units = degrees
      }
      {
        name = mode
        description = "Rotator mode"
        enum = [VERTICAL, STATIONARY, POSITIONANGLE]
      }
    ]
  }
  {
    name = updateRates
    description = "Update the targets differential tracking rates"
    requiredArgs=[virtualTelescope, dra, ddec]
    args = [
      {
        name = virtualTelescope
	description = "Virtual telescope for the pointing kernel to use to calculate offsets"
	enum = [MOUNT, OIWFS1, OIWFS2, OIWFS3, OIWFS4, ODGW1, ODGW2, ODGW3, ODGW4, GUIDER1, GUIDER2]
      }
      {
        name = dra
        description = "RA differential rate"
        type = float
	units=TBD
      }
      {
        name = ddec
        description = "DEC differential rate"
        type = float
	units=TBD
      }
    ]
  }
  {
    name = updateWavelength
    description = "Adjust the targets wavelength"
    requiredArgs=[virtualTelescope, wavelength]
    args = [
      {
        name = virtualTelescope
	description = "Virtual telescope for the pointing kernel to use to calculate offsets"
	enum = [MOUNT, OIWFS1, OIWFS2, OIWFS3, OIWFS4, ODGW1, ODGW2, ODGW3, ODGW4, GUIDER1, GUIDER2]
      }
      {
        name = wavelength
        description = "New Wavelength"
        type = float
	units = microns
      }
    ]
  }
  {
    name = setCorrections
    description = "Control how corrections are applied"
    requiredArgs=[corrections]
    args = [
      {
        name = corrections
	description = "Which corrections to apply"
	enum = [NONE, ALL, TEMP, TIPTILT, FOCUS, SCALLOPING, M1LUT, M2LUT, M3LUT, M1MODES]
      }
    ]
  }
]
